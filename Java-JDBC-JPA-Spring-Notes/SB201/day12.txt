 Spring-core module:
================

DI : using XML 
using annotations

Spring Container====>manages (Spring bean)

3. approaches to make a java class as a Spring bean:
======================================

<bean> tag
stereotype annotations
@Bean


Spring Boot:
===========

Webapplication :  Spring MVC architecture
Webservices (SOAP / REST)
Spring REST using Spring Boot



WebApplication:
==============

--the application that can be accessed over the web through the http protocol
by using web-browser s/w is known as Webapplication.

--Webapplication resides/deployed on the Webserver/ApplicationServer.this type of application
executes on the webserver only.

--A Java based WA basically contains  web-components or webresources like html file, image file, servlet program, jsp program.

--each webresource program is capable of generating one webpage.

webpage: that we can open through a web browser s/w.

the webpages classified into 2 categories:

1.static webpages : here content will be fixed for each user intraction, they are precreated (before client request) ex: home page of gmail.

--the webresources which can generate static webpages are called static webresource program ex: html file
image file, etc.



2.dynamic webpages: page contents will changed dynamically based on the input given by the user. ex: inbox of Gmail.

--they are not precreated before client request, they will be created based on the input value given by the client dynamically.

--the webresources which can generate dynamic webpages are called dynamic webresource program ex:  Servlet program(it is a java class which implements Servlet interface), jsp file.


Webapplication = static(html file, image file, etc) + dynamic webresource program(Servlet, Jsp programs) + some configuration file

 
Servlet : it is a java class in which we write html code inside (it will generate dynamic html)

class MySrv implements Servlet{   //methods of this Servlet interface called by the ServletContainer
//connect with the DB
//int balance = get the balance from the DB

"<h1>Welcome to MyWebsite</h1>";
"<h1>Your Balance is : "+balance+"</h1>";
}

// from the server, Servlet is only responsible to get the request from the client and generate the response to the client



JSP: It is a html file only in which we can write java code.


Note: A WA is a combination of static webresource + dynamic webresource program.

html file
js code (client side programming language, it will execute on the client machine)
css files
image files
mp3
mp4
servlet program
jsp files
configuration file

--then we need to arrange all the files in a standard folder structure given by sun-microsystem.and then compress that folder in a deployable unit.

---.war file (web-module)   -----> deploy on the webserver/application server ( Web-container)


Similarities/differences bt Webapplication and Webservice:
===============================================

---WS is also a type of WA, that can generate dynamic result as raw data(json, xml, text) instead of generating a html response (webpage)

--WA generates the view(webpage) whereas WS generates raw data.

--this raw data generated by the WS can be reused inside any other WA or any other type of application developed in any technology.

Indigo -----> html   (Webapplication) : it is for enduser
            -----> raw data (Webservices)  :- it is for any other application
Yatra 


--In traditional mvc based webapplication developers need to write the Servlet class which will have all the flow control logic and configure that servlet inside our application.

--whereas in spring-mvc framework developers need not  develop any Servlet class, instead Spring-mvc f/w has given a Servlet will all the flow control logic. (DispatcherServlet)




Client <---------   Http protocol      -------------->Server(Web-Container ( WA or WS ))


https://www.gmail.com

https://ipaddressofGmailserver:portnumberoftheServer/appname/index.html

--here /index.html is uri (home page of the gmail app)



Http protocol:
============

--it is a protocol that contains set of rules and guidelines to get communication bt
http client (browser s/w)  and web-server/application-server.

--In case of WA the http client will be web-browser s/w , whereas in case of WS the 
client could be one of the following:

1.brower s/w
2.Postman s/w
3.swagger s/w
4.angular app
5.react app
6.normal JS using ajax (using fetch api)
7.some other application which is developed in another language (.net, python)
8.another type of java application / microservices


--the client of the WS is basically another type of application only.

https://www.gmail.com


https://ipaddress:port/gmailapp/index.html

by typing in the URL
by clicking on the hyperlink
by submitting any form
etc.




Http request structure:
===================

Http request is generated by the client to the server, this request contains lots of details based on the following structure:-


GET (browser url , clicking on hyperlink)
POST (submiting a form, uploading any file )

Note: for a webapplication we can generate only GET or POST method type request.
whereas for a webservices we can generate GET,POST,PUT,DELETE methof type of request.



http request headers:
---------------------------
the headers are the key-value pair, where key is fixed and value will be changed based on the client request.

some of the http request headers are :

1. Date : date and time on which request is made from the client.
2. Host: ipaddress of the client.
3. user-agent: from which browser the client has generated the request.
4.content-type: type of the data coming from the request body (json, txt, xml, pdf, jpg)
5.connection : live or lost
6.cookies: name-value pair text   :- 

we can create our headers also :

JWT ---> token






Http Response Structure:
====================


Webapplication: (it is a combination of static and dynamic webresources(servlet, jsp) , each web resource is capable of generating a web page)
               ---web-server(Web-container ) 

Web-services :        

               http 
client <---------------> Server



http response  : this response will come from the server to the client

http response structure:
--------------------------------

webserver will generate the http response for a http request to the client.

http status code:
-----------------------

--by default these status code will be set by the server, or as a developer we can 
also set our desired status code.

100 -- 199  : information 
200 -- 299 : success or OK
300--399 : redirection
400 -499 : incomplete resource / bad request
500-599 : server-error

---these status code will be used by the client to know the status of their request.


http response headers:
----------------------------

these headers carries some additional information to the client to guide the client
when using or displaying the response.

some of the http response headers are:

server : 
last-modified : 
refresh: 10 
date:
connention: 
content-type: "text/html"  , "application/json", "application/pdf" ,"application/xml"
set-cookie : 
etc..



Many to one (uni-directional):-
------------------------------------

--from Emp to Dept

--in one to many we navigate from parent to child, whereas in many to one we navigate from child to parent.

--MTO association means many obj of child Entity holds the single obj of parent Entity


--here we need to take a Department class reference variable inside the Employee class and apply the @ManytoOne annotation.

--and Department Entity class should not have any reff of Employee class, since it is a uni-direcitional.

ex:-


Department.java:-
----------------------


@Entity
public class Department {
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int deptId;
	private String dname;
	private String location;
	
	--
	--
	}


Employee.java:-
------------------


@Entity
public class Employee {
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int empId;
	private String name;
	private int salary;
	
	@ManyToOne(cascade=CascadeType.ALL)
	private Department dept;
--
	
}

Demo.java:-
--------------


public class Demo {

	public static void main(String[] args) {
		
	EntityManager em=EMUtil.provideEntityManager();
		
	Department dept=new Department();
	dept.setDname("Sales");
	dept.setLocation("mumbai");
	
	Employee emp1=new Employee();
	emp1.setName("ram");
	emp1.setSalary(7800);
	emp1.setDept(dept);
	
	Employee emp2=new Employee();
	emp2.setName("ramesh");
	emp2.setSalary(8850);
	emp2.setDept(dept);
	
	
	em.getTransaction().begin();
	
	em.persist(emp1);
	em.persist(emp2);
	
	em.getTransaction().commit();
	
	System.out.println("done...");
	
	}
}

 
--here a seperate table will not be created, instead inside the child table one FK column will be created which will reffer the Department table PK.

--here employee table is the owner of the relationship, 

bydefault name of this FK will be "dept_deptid" with respect to above application.

--if we want to change this name then we need to use 


ex:-


	@ManyToOne(cascade=CascadeType.ALL)
	@JoinColumn(name="did")
	private Department dept;
	

getting the details of Department based on employee Id:-
------------------------------------------------------------------


	EntityManager em=EMUtil.provideEntityManager();
		
	
	
	Employee emp= em.find(Employee.class, 3);
	
	Department dept= emp.getDept();
	
	System.out.println(dept.getDeptId());
	System.out.println(dept.getDname());
	System.out.println(dept.getLocation());
	


One to Many (bidirectional):-
----------------------------------

--here we need to combine above both approach , i.e inside Dept class we need take the List<emp> variable and inside Emp class we need to take the Dept class simple variable

--here we can apply cascading in both side.

***while persisting the objs we need to associate both objs with each ohter. otherwise we will not get the desired result.



 
ex:-

Employee.java:-
------------------


@Entity
public class Employee {
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int empId;
	private String name;
	private int salary;
	
	@ManyToOne(cascade=CascadeType.ALL)
	private Department dept;
}



Department.java:-
-----------------------


@Entity
public class Department {
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int deptId;
	private String dname;
	private String location;
	
	@OneToMany(cascade=CascadeType.ALL)
	private List<Employee> emps=new ArrayList<Employee>();
--	
}
	

Demo.java:-
---------------


public class Demo {

	public static void main(String[] args) {
		
	EntityManager em=EMUtil.provideEntityManager();
		
	Department dept=new Department();
	dept.setDname("Marketing");
	dept.setLocation("Kolkata");
	
	Employee emp1=new Employee();
	emp1.setName("Sunil");
	emp1.setSalary(7800);
	emp1.setDept(dept); //associating dept with emp1
	
	Employee emp2=new Employee();
	emp2.setName("Suresh");
	emp2.setSalary(8800);
	emp2.setDept(dept); //associating dept with emp1
	
	//here both emp got the dept details..
	
	//now we need to give both emp details to the dept
	//associating both emp with the dept
	
	dept.getEmps().add(emp1);
	dept.getEmps().add(emp2);
	
	
	em.getTransaction().begin();
	
	em.persist(dept);
	
	em.getTransaction().commit();	
		
	System.out.println("done...");
	
	}
}


--here one 3rd table will be created, by using this Dept Entity will get the details of Emp Entity.
and one FK column will be generated inside the emp table by using this Emp Entity get the details of Dept.


--in order to tell the ORM s/w while navigating from Dept to Emp,don't use the 3rd linking table , relationship is already maintained inside the employee table , so instead of using 3rd table use the employee table reff we use "mappedBy" property inside the @OneToMany annotation with the value:- the variable defined in another side.



Employee.java:-
-----------------


@Entity
public class Employee {
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int empId;
	private String name;
	private int salary;
	
	@ManyToOne(cascade=CascadeType.ALL)
	@JoinColumn(name="did")
	private Department dept; //this variable is used in mappedBy of Department class
	
}

Department.java:-
---------------------


	@Entity
	public class Department {
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int deptId;
	private String dname;
	private String location;
	
	@OneToMany(mappedBy="dept" ,cascade=CascadeType.ALL)
	private List<Employee> emps=new ArrayList<Employee>();
	
--	
}


Demo.java:-
---------------

same as above app


List out all the employees working in perticular dept:-
----------------------------------------------------------------

Demo.java:-
---------------


public class Demo {

	public static void main(String[] args) {
		
	EntityManager em=EMUtil.provideEntityManager();
		
	Department d= em.find(Department.class, 1);
	
	List<Employee> emps= d.getEmps();
	
	emps.forEach(e ->{
		
		System.out.println(e.getEmpId());
		System.out.println(e.getName());
		System.out.println(e.getSalary());
		
	});
	
	System.out.println("done...");
	
	}
}



ManytoMany:-
------------------


ManyTOMany :- (it is binature a bidirectional association)
===========



--it is a combination of one-to-many association from parent and one-to-many association from child 

--at table level,to establish a many-to-many relationship we need a third linking table.


steps to achive the MTM relationship bt classes in HB:-
------------------------------------------------------


incase of MTM relationship we need to take both side collection properties and we need to apply @ManyToMany anno on the top of both side variables.

ex:-


public class Department
{

@ManyToMany(cascade = CascadeType.ALL)
List<Employee> empList = new ArrayList<>();
--
--

}



public class Employee
{
@ManyToMany(cascade = CascadeType.ALL)
List<Department> deptList = new ArrayList<>();

}


Note: while persisting the record we need to assoicate both objects with each other.





ex:-




		Department d1 = new Department();
		d1.setDname("sales");
		d1.setLocation("kolkata");


		Department d2 = new Department();
		d2.setDname("Marketing");
		d2.setLocation("delhi");

		
		
		
		//creating employee without department
		Employee emp1 = new Employee();
		emp1.setName("ram");
		emp1.setSalary(50000);
		
		
		Employee emp2 = new Employee();
		emp2.setName("dinesh");
		emp2.setSalary(30000);
		
		//associating department with both employees(ram,dinesh) with dept sales
		emp1.getDeptList().add(d1);
		emp2.getDeptList().add(d1);
		
		//associating dept(sales) with both emp1 and emp2
		
		d1.getEmpList().add(emp1);
		d1.getEmpList().add(emp2);
		
		
		
		//assume dinesh is working in 2 dept(sales and marketing)
		emp2.getDeptList().add(d2);
		d2.getEmpList().add(emp2);
		
		
		
		em.getTransaction().begin();
		
		em.persist(d1);
		em.persist(d2);
		
		em.getTransaction().commit();

		System.out.println("done");
	}




--here if we save the both the objs by associating them together then it will create total 4 tables

department
employee
department_employee(Employee_empid, deptList_did)
employee_department(Department_did,empList_empid)






--in order to generate only one linking table then we need to use mappedBy property here also(in any side).

ex:-



@Entity
public class Department {
	
	@ManyToMany(cascade = CascadeType.ALL,mappedBy = "deptList")
	List<Employee> empList = new ArrayList<>();;
	
}	




--here Employee obj doing the mapping not the Department obj.
so only one linking table will be created by name employee_department.



--here also we can mention the JoinTable name and joinColumn names,inverseColumn name ,this should be inside the Employee class.


ex:-

@Entity
public class Employee {


	@ManyToMany(cascade = CascadeType.ALL)
	@JoinTable(name = "emp_dept", joinColumns = @JoinColumn(name="empid"),inverseJoinColumns = @JoinColumn(name="deptid") )
	private List<Department> deptList;
	
}



Navigating from emp to dept:-
-----------------------------

		List<Department> dlist =em.find(Employee.class, 2).getDeptList();
		
		System.out.println(dlist);
		
		
Navigating from dept to emp:-
------------------------------------
		

		List<Employee> dlist =em.find(Department.class, 1).getEmpList();
		
		System.out.println(dlist);
		



OneToOne:-
=========

--at table level,we can maintain OTO relation by taking FK as Unique.


unidirectional:-
------------------



--Assume one department has only one employee and one employee belongs from only one dept.


we can take other example also

ex:-

Emp --> Address

Person --> DL

--here we need to use @OneToOne annotation


@Entity
public class Department {
	
	@OneToOne(cascade = CascadeType.ALL)
	private Employee emp;

}


Main class:-
------------


		
		
		Department d1=new Department();
		d1.setDname("Sales");
		d1.setLocation("kolkata");
	
	
		
		
		Employee emp = new Employee();
		emp.setEname("Ram");
		emp.setSalary(8500);
		
		d1.setEmp(emp);
		
		em.getTransaction().begin();
		
		em.persist(d1);
		
		em.getTransaction().commit();

	
		

--here 2 table will be created 

1.employee (empid,name,salary)

2.department(did,dname,dlocation, emp_empid) (this emp_empid will be the FK)




--if we want to change this auto generated FK column name then we need to apply @JoinColumn anno

ex:-

@OneToOne
@JoinColumn(name="eid")
private Employee emp;





bidirectional:-
--------------



onetoone bidirectional :-
-----------------------

here on both side define opposit class variables:-

ex:-

Department:-
	@OnetoOne
	private Employee emp

Employee:-
	@OneToOne
	private Department dept



ex:-


		
		
		Department d1=new Department();
		d1.setDname("Sales");
		d1.setLocation("kolkata");
	
		
		Employee emp = new Employee();
		emp.setEname("Ram");
		emp.setSalary(8500);
		
		d1.setEmp(emp);
		emp.setDept(d1);
		
		
		em.getTransaction().begin();
		em.persist(d1);
		em.getTransaction().commit();
		
		System.out.println("done..");

--in this case 2 table will be created both will containes the id of each other as FK as an extra column.


department:-(emp_empid as FK)

employee:- (dept_did as FK)



--if we want that only one table should maintains the FK col then we use mappedBy on any side.

ex:-


Department:-
   
    @OneToOne(mappedBy = "dept")
	private Employee emp;


--here Employee class maintains the FK id by name dept_did


--if we want to change this FK column name then 


	@OneToOne
	@JoinColumn(name = "did_FK")
	private Department dept;


ex:-

Navigating from dept to emp:-
-----------------------------


		
	 Department d= em.find(Employee.class, 2).getDept();
		
		System.out.println(d);
		








Inheritence Mapping:-
=====================

--In DataAccessLayer,between persistent class IS-A relationship is posibly exist.

--but in DB we don't have IS-A relationship between corresponding tables.


--to solve this problem we use inheritence mapping in HB.


JPA supports inheritence mapping with 3 strategy:-


1.one table for entire hirarchy/Single table.

2.table per sub-classes/Joined Table

3.Table per concreate class/ Table Per class:-


1.one table for entire hirarchy/Single table:
----------------------------------------------------

--this strategy is the default strategy in HB to perform the inheritance mapping


here we will take a single table with  the all the columns, corresponding to generalized properties of super class and specialized properties for all the sub classes and one extra discriminator column.

--with the help of this descriminator value DB table maintains which Entity class of the inheritence hirarcy  inserting the record.


Example:

Employee.java:-
--------------



@Entity
@Inheritence(strategy=InheritanceType.SINGLE_TABLE) // this line is optional, it is the default strategy
public class Employee {
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int eid;
	private String name;

//getters and setters


}




ContractualEmployee.java:-
--------------------------

@Entity
public class ContractualEmployee extends Employee{

	private int noOfWorkingDays;
	private int costPerDay;
	
//setters and getters

}



SalaryEmployee.java:-
--------------------

@Entity
public class SalaryEmployee extends Employee{

	private int salary;

//setters and getters

}



Demo.java:-
--------------
		
		Employee emp=new Employee();
		emp.setName("Ram");
		
		
		SalariedEmployee semp=new SalariedEmployee();
		semp.setName("Mohan");
		semp.setSalary(85000);
		
		ContractualEmployee cemp=new ContractualEmployee();
		cemp.setName("Hari");
		cemp.setCostPerDay(3000);
		cemp.setNoOfWorkingDays(10);
		
		em.getTransaction().begin();
		em.persist(emp);
		em.persist(semp);
		em.persist(cemp);
		em.getTransaction().commit();
		
		System.out.println("done");


--here one single table is created with all columns (for all the properties of super class Entity and all the proeperties of all the sub class Entities) plus one extra column DTYPE, which represents which class has made the entry. 

--we can change this DTYPE column name and its corresponding value as follows:


@Entity
@Inheritance(strategy=InheritanceType.SINGLE_TABLE) 
@DiscriminatorColumn(name="emptype",discriminatorType=DiscriminatorType.STRING)
@DiscriminatorValue(value="emp")
public class Employee {

	int id;
	String name;

//setters and getters
	
}



ContractualEmployee.java:-
--------------------------

@Entity
@DiscriminatorValue(value="contEmp")
public class ContractualEmployee extends Employee{


	private int noOfWorkingDays;
	private int costPerDay;
	
//setters and getters

}



SalariedEmployee.java:-
--------------------


@Entity
@DiscriminatorValue(value="salEmp")
public class SalariedEmployee extends Employee{

	private int sal;

//setters and getters

}

		
		



Note:-the limitation of the above strategy is :-

1.designing a table with huge number of column is not recomended,against the rule of normalizations.

2.with the above strategy,we can not apply not null to the coulmns


2.Table per sub-classes strategy/Joined Table:-
====================================

--in this,every Entity class of inheritence hirarchy will have its own table and these table will participate in relationship,that means every record of child table will represent one record of parent table. 

--in this mode of inheritence mapping,each child record of child table maintains association with a record of parent table .

--inside all the child tables we should have a FK column that reffers Pk column of parent table.



--while saving data by using child class obj,the common properies data will be saved to parent table and child class properties will be saved in child table.




Adv of table per subclasses strategy:-
-------------------------------------------


1.DB tables can be designed by satisfying normalization forms/rules.

2.no need to take any discriminator value.

3. not null constraint can be applied.






@Inheritence(strategy=InheritenceType.JOINED) to mention table per child class

@PrimaryKeyJoinColumn(name="PKid") to modify the FK coulmn name in the child class 



Example:

Employee.java:-
------------------

@Entity
@Inheritance(strategy=InheritanceType.JOINED)
public class Employee {

	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int empId;
	
	
	private String name;


ContractualEmployee.java:-
---------------------------------


@Entity
@PrimaryKeyJoinColumn(name="eid")
public class ContractualEmployee extends Employee {
	
	private int noOfWorkingDays;
	private int costPerDay;
	

}

SalariedEmployee.java
----------------------------


@Entity
@PrimaryKeyJoinColumn(name="eid")
public class SalariedEmployee extends Employee{

	private int salary;

}



3.Table per concreate class/ Table Per class:-
=================================

--in this strategy,every Entity class of inheritence hirarcy will have its own DB table these tables need not stay in relationship.

--in this strategy all the child class corresponding tables has all the column of its super class coresponding columns also.
for ex:-

class Employee(id,name)--->employee(id,name);

class SalaryEmployee extends Employee(salary)------->semployee(id,name,salary);

class ContractualEmployee extends Employee(noOfWorkingDays,costPerDay)---
------->cemployee(id,name,noOfWorkingDays,costPerDays);



--due to this,same column of parent table will be repeated inside all the child table.


Example:


Employee.java:-
-------------

@Entity
@Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)
public class Employee {

	@Id
	@GeneratedValue
	private int empid;

	private String name;


}

ContractualEmployee.java:-
-------------------------



@Entity
public class ContractualEmployee extends Employee{
	
	private int noOfWorkingDays;
	private int costPerDay;
	
}




SalariedEmployee.java:-
-----------------------


@Entity
public class SalariedEmployee extends Employee{
	
	private int salary;
	
}



There is another category called MappedSuperclass:-
--------------------------------------------------------------


--Using the MappedSuperclass strategy, we can save only child class object, (here all the data of the child Entity and inherited data of the parent class will be persisted).

--in this strategy parent class will not be an Entity, it will be a normal java class.(can be an abstract class also)


Example

Employee.java:-
------------------


@MappedSuperclass
public abstract class Employee {

	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int empId;
	
	
	private String name;
}


Demo.java:-
--------------

		//This emp is not an Entity so it can't be persisted
		//Employee emp=new Employee();
		//emp.setName("Ram");
		
		
		SalariedEmployee semp=new SalariedEmployee();
		semp.setName("Mohan");
		semp.setSalary(85000);
		
		ContractualEmployee cemp=new ContractualEmployee();
		cemp.setName("Hari");
		cemp.setCostPerDay(3000);
		cemp.setNoOfWorkingDays(10);
		
		em.getTransaction().begin();
		//em.persist(emp);
		em.persist(semp);
		em.persist(cemp);
		em.getTransaction().commit();
		
		System.out.println("done");
		















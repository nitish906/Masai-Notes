

TreeSet class:
===========

--here underlaying DS is balanced tree.

--duplicates are not allowed.

--insertion order will not be preserved. (index support is not there)

--elements will be in sorted order

--null insertion is not possible (even a single null also, it will throw NullPointerException)

example1:

	TreeSet<Integer> ts= new TreeSet<>();
		
		ts.add(10);
		ts.add(12);
		ts.add(20);
		ts.add(15);
		ts.add(5);
		ts.add(2);
		ts.add(2);
		//ts.add(null);
		ts.add(18);
		
		System.out.println(ts);
		
example2:


TreeSet<String> ts= new TreeSet<>();
		
		ts.add("one");
		ts.add("two");
		ts.add("three");
		ts.add("four");
		ts.add("five");
		
		
		System.out.println(ts);

output: [five, four, one, three, two]


Note: if we try add any element inside TreeSet class, that element (that class) must implement Comparable interface. otherwise it throws a ClassCastException.

--All the wrapper classes and String class internally implements Comparable interface.

--this Comparable interface belongs to "java.lang" package.

--this Comparable inteface has only one abstract method :

public int compareTo(Object obj);

--by the help of this method we need to define the sorting logic inside the class which we want to add inside TreeSet.

ts.add(s1);
ts.add(s2);

here TreeSet call the compareTo method on s1 by passing s2 as an argument
ex:

s1.compareTo(s2);


--the above method will return following values:

1. if s1 is bigger than s2 then it should return +1;
2. if s2 is bigger than s1 then it should return -1;
3. if both s1 and s2 are same (duplicate)then it should return 0;

Exmaple:

Student.java:
---------------

package com.masai;

public class Student implements Comparable<Student>{
	
	private int roll;
	private String name;
	private int marks;
	
	
	
	
	public Student() {
		// TODO Auto-generated constructor stub
	}


	public Student(int roll, String name, int marks) {
		super();
		this.roll = roll;
		this.name = name;
		this.marks = marks;
	}


	
	

	public int getRoll() {
		return roll;
	}


	public void setRoll(int roll) {
		this.roll = roll;
	}


	public String getName() {
		return name;
	}


	public void setName(String name) {
		this.name = name;
	}


	public int getMarks() {
		return marks;
	}


	public void setMarks(int marks) {
		this.marks = marks;
	}
	
	@Override
	public String toString() {
		return "Student [roll=" + roll + ", name=" + name + ", marks=" + marks + "]";
	}


	@Override
	public int compareTo(Student s) {
		
		
		if(this.getMarks() > s.getMarks())
			return +1;
		else if(this.getMarks() < s.getMarks())
			return -1;
		else
			return 0;
		
		
		
		
	}


//	@Override
//	public int compareTo(Object o) {
//		
//		 Student s1=this;
//		 Student s2= (Student)o;
//		
//		 if(s1.getMarks() > s2.getMarks())
//			 return +1;
//		 else if(s1.getMarks() < s2.getMarks())
//			 return -1;
//		 else
//			 return 0;
//	}
//	
		
}



Note: HashSet and LinkedHashSet class verify the uniqueness of an object(duplicate object ) by using equals() and hashCode() method, whereas TreeSet class verifyies the uniqueness of an obj by using compareTo() method(if it returns 0);


Sorting with duplicate:
==================

	@Override
	public int compareTo(Student s) {
		
		
		if(this.getRoll() > s.getRoll())
			return +1;
		else
			return -1;		

		//return this.getRoll() > s.getRoll() ? +1: -1;
		
	}



sorting accoring to name :
=====================

	@Override
	public int compareTo(Student s) {
		
		
		//return this.getName().compareTo(s.getName());
		return s.getName().compareTo(this.getName());
		
	}


Soring accoring to marks, and if marks are same then sort them according to the name:
---------------------------------------------------------------------------------------------------------


	@Override
	public int compareTo(Student s) {
		
		if(this.getMarks() > s.getMarks())
			return +1;
		else if(this.getMarks() < s.getMarks())
			return -1;
		else
			return this.getName().compareTo(s.getName());
			
		
	
	}







Comparator(I):
===========

--this interface belongs to java.util package.

--using this interface we can define the sorting logic of class object outside that class.

--this interface is also having only one abstract method:

public int compare(Object obj1, Object obj2);


Note: using Comparable we can define only one sorting logic within a class, but using Comparator we can define multiple sorting logic for a class from outside of that class.


example:

StudentMarksComp.java:
--------------------------------

package com.masai;

import java.util.Comparator;

public class StudentMarksComp implements Comparator<Student>{

	@Override
	public int compare(Student s1, Student s2) {

		if(s1.getMarks() > s2.getMarks())
			return +1;
		else if(s1.getMarks() < s2.getMarks())
			return -1;
		else
			return 0;
		
		
		
		
	}
}


Demo.java:
--------------

package com.masai;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;

public class Demo {
	

	public static void main(String[] args) {
		
		
		//StudentMarksComp mcomp=new StudentMarksComp();
		//TreeSet<Student> ts= new TreeSet<>(mcomp);
			
		TreeSet<Student> ts= new TreeSet<>(new StudentNameComp());
		
		ts.add(new Student(10, "n1", 780));
		ts.add(new Student(12, "n5", 680));
		ts.add(new Student(14, "n2", 480));
		ts.add(new Student(15, "n4", 680));
		ts.add(new Student(15, "n3", 780));
		ts.add(new Student(16, "n6", 680));
		
		
		System.out.println(ts);
		
		
	}

}



Utility classes in Collection framework:
================================

--there are 2 utility classes (also known as tools classes or helper classes)  belongs to java.util package.

java.util.Arrays(c) : it is used to simplify the normal array related task

java.util.Collections(c) : it used to simplify the collection f/w related task.

--both classes provides some of the static methods to simplify the application task.


Arrays class:
===========

ex1:

		int[] arr= {10,20,30,40,50};
		
		//String result= Arrays.toString(arr);
		//System.out.println(result);
		
		System.out.println(Arrays.toString(arr));


ex2:

		List<Integer> list= Arrays.asList(10,20,30,40,50);
		
		System.out.println(list);
		
		
		List<String> cities= Arrays.asList("mum","che","kol","del","hyd","bang");
		
		System.out.println(cities);



ex3: sorting and searching:
--------------------------------------

		int[] arr= {10,2,5,12,15,18,6,8,9};
		//before sorting
		System.out.println(Arrays.toString(arr));
		
		Arrays.sort(arr);
		
		//after sorting
		System.out.println(Arrays.toString(arr));
		
		int i= Arrays.binarySearch(arr, 10);

		System.out.println(i);



Note: without sorting binarySearch will give unexpected result.


Collections(c):
-------------------

ex1:

		List<Integer> list= Arrays.asList(2,5,8,2,5,2,7,9,2);
		
		int x= Collections.frequency(list, 2);
		
		System.out.println(x);//4 times


ex2:


		List<Integer> list= Arrays.asList(2,5,8,2,5,2,7,9,2);
		
		//here duplicates will be removed
		//TreeSet<Integer> ts= new TreeSet<>(list);
		//System.out.println(ts);
		
		System.out.println(list);
		
		Collections.sort(list);
		
		System.out.println(list);

		

ex3: Sort a perticular List of Student( here Student class does not implements Comparable)

		List<Student> students = new ArrayList<>();
		
		students.add(new Student(10, "n1", 780));
		students.add(new Student(15, "n4", 480));
		students.add(new Student(12, "n3", 680));
		students.add(new Student(11, "n2", 880));
		students.add(new Student(14, "n5", 720));
		students.add(new Student(16, "n6", 480));
		
		Collections.sort(students,new StudentMarksComp());
		//Collections.sort(students); // here Student class should  implements Comparable		

		System.out.println(students);
		

--here since it is List, duplicate Student will be there.


		List<Student> students = new ArrayList<>();
		
		students.add(new Student(10, "n1", 780));
		students.add(new Student(15, "n4", 480));
		students.add(new Student(12, "n3", 680));
		students.add(new Student(11, "n2", 880));
		students.add(new Student(14, "n5", 720));
		students.add(new Student(16, "n6", 480));
		
		
		
		Student s= Collections.max(students, new StudentMarksComp());
		
		
		System.out.println(s);
		
		

 
ex3:

		List<Student> students = new ArrayList<>();
		
		students.add(new Student(10, "n1", 780));
		students.add(new Student(15, "n4", 480));
		students.add(new Student(12, "n3", 680));
		students.add(new Student(11, "n2", 880));
		students.add(new Student(14, "n5", 720));
		students.add(new Student(16, "n6", 480));
		
		
		
		 List<Student> sList = Collections.synchronizedList(students);
		

ex4:

	List<Integer> list= Arrays.asList(10,20,30,40,2,12,8,40);
	
		Collections.reverse(list);
		
		System.out.println(list);



